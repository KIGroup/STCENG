<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Stc.DeepSee.TrainingCube.Fact">
<Description><![CDATA[
Fact table for cube 'TrainingCube'.<br/>
THIS IS A GENERATED CLASS, DO NOT EDIT.<br/>
Generated by %DeepSee.Generator:%CreateFactTable.]]></Description>
<Final>1</Final>
<IncludeCode>%DeepSee</IncludeCode>
<Owner/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%DeepSee.FactTable,%DeepSee.CubeFunctionSet</Super>
<TimeCreated>63753,77407.32271</TimeCreated>
<GeneratedBy>Stc.DeepSee.TrainingCube.CLS</GeneratedBy>
<Inheritance>right</Inheritance>

<Parameter name="BITMAPCHUNKINMEMORY">
<Default>0</Default>
</Parameter>

<Parameter name="CUBENAME">
<Default>TrainingCube</Default>
</Parameter>

<Parameter name="SOURCECLASS">
<Default>Stc.Data.Training</Default>
</Parameter>

<Index name="DxNameViaCourse">
<Description>
Index for fact 2.</Description>
<Type>bitmap</Type>
<Properties>DxNameViaCourse</Properties>
</Index>

<Index name="DxDateFinishFxYear">
<Description>
Index for fact 3.</Description>
<Type>bitmap</Type>
<Properties>DxDateFinishFxYear</Properties>
</Index>

<Index name="DxTeacher">
<Description>
Index for fact 4.</Description>
<Type>bitmap</Type>
<Properties>DxTeacher</Properties>
</Index>

<Index name="MxIDI">
<Description>
Index for measure M1.</Description>
<Type>bitslice</Type>
<Properties>MxIDI</Properties>
</Index>

<Property name="%sourceId">
<Description>
Reference to original data in source table.</Description>
<Type>Stc.Data.Training</Type>
</Property>

<Property name="%partition">
<Description>
This indicates which partition (set of 1M) this fact is in.</Description>
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode>Set {%partition}=({ID}\1024000)+1</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="DxDateFinish">
<Description><![CDATA[
Измерение : DxDateFinish<br/>
Источник: DateFinish]]></Description>
<Type>%DeepSee.Datatype.dateTime</Type>
</Property>

<Property name="DxNameViaCourse">
<Description><![CDATA[
Измерение : DxNameViaCourse<br/>
Источник: Course.Name]]></Description>
<Type>Stc.DeepSee.TrainingCube.StarNameViaCourse</Type>
</Property>

<Property name="DxDateFinishFxYear">
<Description><![CDATA[
Измерение : DxDateFinishFxYear<br/>
Источник: DateFinish]]></Description>
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode>Set {DxDateFinishFxYear}=$S({DxDateFinish}="":"",""="":+$E($ZDT({DxDateFinish},3),1,4),1:+$E($ZDT(##class(%DeepSee.Utils).%AddTimeInterval({DxDateFinish},""),3),1,4))</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="DxTeacher">
<Description><![CDATA[
Измерение : DxTeacher<br/>
Источник: Teacher]]></Description>
<Type>Stc.DeepSee.TrainingCube.StarTeacher</Type>
</Property>

<Property name="MxIDI">
<Description><![CDATA[
Показатель: MxIDI<br/>
Источник: %ID]]></Description>
<Type>%Integer</Type>
</Property>

<Method name="%Count">
<Description><![CDATA[
Return the total number of items within the Fact table.<br/>
Generated by %DeepSee.Generator:%CreateFactTable.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
 Set tCount = 0
 &sql(SELECT COUNT(*) INTO :tCount FROM Stc_DeepSee_TrainingCube.Fact)
 Quit tCount
]]></Implementation>
</Method>

<Method name="%UpdateFacts">
<Description><![CDATA[
Update a range of Facts with data from the source table row with ids from <var>pStartId</var> to <var>pEndId</var>.<br/>
Generated by %DeepSee.Generator:%CreateFactTable.<br/>
DO NOT CALL THIS METHOD DIRECTLY]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStartId:%String,pEndId:%String,pBatchMode:%Boolean=0,&pChunks:%Integer,pVerbose:%Boolean=0,pTaskGroup:%String="",*pUpdates:%Integer,pRefProp:%String="",pRefID:%String="",&pDimTables]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set tSC = $$$OK
 Set tRS = ""
 New %var,%source,%ROWID,%msg,%dsSourceId,%dsSourceObj
 Try {
 Set (SQLCODE,tStarId) = ""
 Set pUpdates = 0
 Set tLastCount = 0
 Set tID = ""
 Set tRows = 0
 If (pEndId="") {
  Set:+$G(%dsReadCommitted,1) oldzu=$ZU(115,2,1)
  Set pEndId=pStartId
 }
 If (pRefProp'="") {
  Set tRS = ##class(%ResultSet).%New()
  Set tSC = tRS.Prepare("SELECT %ID,%ID ""MxIDI"",Course->Description->Value ""Dx1487286328"",%EXTERNAL(Course->Name) ""DxNameViaCourse"",DateFinish ""DxDateFinish"",%EXTERNAL(DateFinish) ""DxDateFinishFxYear"",%EXTERNAL(Teacher) ""DxTeacher"" FROM Stc_Data.Training"_" WHERE "_pRefProp_"=?")
  If $$$ISERR(tSC) Quit
  Set tSC = tRS.Execute(pRefID)
  If $$$ISERR(tSC) Quit
 }
 ElseIf (pStartId=pEndId) {
  &sql(DECLARE sqeq2407786479 CURSOR FOR
  SELECT %ID,%ID "MxIDI",Course->Description->Value "Dx1487286328",%EXTERNAL(Course->Name) "DxNameViaCourse",DateFinish "DxDateFinish",%EXTERNAL(DateFinish) "DxDateFinishFxYear",%EXTERNAL(Teacher) "DxTeacher" FROM Stc_Data.Training
  WHERE %ID = :pStartId
  )
  &sql(OPEN sqeq2407786479)
  If (SQLCODE'=0) {
   Set tSC = $$$ERROR($$$GeneralError,"Error opening SQL cursor: ("_$G(SQLCODE)_") "_$G(%msg))
   Quit
  }
  &sql(FETCH sqeq2407786479 INTO :tID,:%var("MxIDI"),:%var("Dx1487286328"),:%var("DxNameViaCourse"),:%var("DxDateFinish"),:%var("DxDateFinishFxYear"),:%var("DxTeacher"))
 }
 Else {
  &sql(DECLARE sq2407786479 CURSOR FOR
  SELECT %ID,%ID "MxIDI",Course->Description->Value "Dx1487286328",%EXTERNAL(Course->Name) "DxNameViaCourse",DateFinish "DxDateFinish",%EXTERNAL(DateFinish) "DxDateFinishFxYear",%EXTERNAL(Teacher) "DxTeacher" FROM Stc_Data.Training
  WHERE %ID BETWEEN :pStartId  AND :pEndId
  )
  &sql(OPEN sq2407786479)
  If (SQLCODE'=0) {
   Set tSC = $$$ERROR($$$GeneralError,"Error opening SQL cursor: ("_$G(SQLCODE)_") "_$G(%msg))
   Quit
  }
  &sql(FETCH sq2407786479 INTO :tID,:%var("MxIDI"),:%var("Dx1487286328"),:%var("DxNameViaCourse"),:%var("DxDateFinish"),:%var("DxDateFinishFxYear"),:%var("DxTeacher"))
 }
 While ($S($IsObject(tRS):tRS.Next(.tSC),1:SQLCODE=0)) {
 Try {
 If ($IsObject(tRS)) {
  If $$$ISERR(tSC) Quit
  Set tID = $G(tRS.Data("%ID"))
  Set %var("MxIDI") = $G(tRS.Data("MxIDI"))
  Set %var("Dx1487286328") = $G(tRS.Data("Dx1487286328"))
  Set %var("DxNameViaCourse") = $G(tRS.Data("DxNameViaCourse"))
  Set %var("DxDateFinish") = $G(tRS.Data("DxDateFinish"))
  Set %var("DxDateFinishFxYear") = $G(tRS.Data("DxDateFinishFxYear"))
  Set %var("DxTeacher") = $G(tRS.Data("DxTeacher"))
 }
 Set %dsSourceId = $G(tID)
 Set:pBatchMode tExStartTime = $ZH
 Set:pBatchMode x = $I(^CacheTemp.DeepSeeBuildStats($ZU(5),"TRAININGCUBE","expr"),$ZH-tExStartTime)

 #; invoke method to process this fact
 Set tFactId = ""
 Set tSC = ##class(Stc.DeepSee.TrainingCube.Fact).%ProcessFact(tID,pBatchMode,.%var,.tFactId,.tErrorMsg,.pDimTables)
 If (tFactId'="") {
 If $$$ISOK(tSC) {
  Set pUpdates = pUpdates+1
  Set pChunks(tFactId\64000+1) = ""
 }
 ElseIf (pVerbose) {
  Write "Error filing row: ",tID,!
  Write:tErrorMsg'="" tErrorMsg,!
  Do $System.Status.DisplayError(tSC)
  Set tSC = $$$OK
 }
 Kill pDimTables
 Set tRows = tRows + 1
 If (pVerbose&&'(tRows#1000)) Write $C(13,27)_"[0J"_"Building fact table: ",?25,$J($FN(tRows,",",0),10)," fact(s) updated."
 If (pVerbose&&'(tRows#1000)&&(+$G(%dserrcount))) Write " ",$J($FN(%dserrcount,",",0),10)," error(s)"
 If ((pTaskGroup'="")&&'(tRows#1000)) {
  Set tDelta = tRows - tLastCount
  Set inc=$I(^CacheTemp.DeepSeeUpdate($ZU(5),pTaskGroup,"facts"),tDelta)
  Set tLastCount = tRows
 }
 } ;factId
  }
  Catch (ex) {
    Set tSC = ex.AsStatus()
    If ($G(tID)'="") {
      S:($G($$$DeepSeeBuildErrorsGLVN("TRAININGCUBE",tID))="") x = $I($$$DeepSeeBuildErrorsGLVN("TRAININGCUBE"))
      Set $$$DeepSeeBuildErrorsGLVN("TRAININGCUBE",tID) = tSC
    }
  }
  If '$IsObject(tRS) {
   If (pStartId=pEndId) {
    &sql(FETCH sqeq2407786479 INTO :tID,:%var("MxIDI"),:%var("Dx1487286328"),:%var("DxNameViaCourse"),:%var("DxDateFinish"),:%var("DxDateFinishFxYear"),:%var("DxTeacher"))
   }
   Else {
    &sql(FETCH sq2407786479 INTO :tID,:%var("MxIDI"),:%var("Dx1487286328"),:%var("DxNameViaCourse"),:%var("DxDateFinish"),:%var("DxDateFinishFxYear"),:%var("DxTeacher"))
   }
  }
 } ;while
  If '$IsObject(tRS) {
   If (pStartId=pEndId) {
    &sql(CLOSE sqeq2407786479)
   }
   Else {
    &sql(CLOSE sq2407786479)
   }
  }
 If (pVerbose) Write $C(13,27)_"[0J"_"Building fact table: "_$FN(+$G(tRows),",",0)_" fact(s) updated"
 If (pTaskGroup'="") {
  Set tDelta = tRows - tLastCount
  Set inc=$I(^CacheTemp.DeepSeeUpdate($ZU(5),pTaskGroup,"facts"),tDelta)
 }
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  &sql(CLOSE sqeq2407786479)
  &sql(CLOSE sq2407786479)
 }
  Set:$D(oldzu) zu=$ZU(115,2,oldzu)
 If ($$$ISERR(tSC)) {
  Do ..%LogError(tSC)
  If (pVerbose) {
   Do $System.Status.DisplayError(tSC)
  }
  If ($G(tID)'="") {
   S:($G($$$DeepSeeBuildErrorsGLVN("TRAININGCUBE",tID))="") x = $I($$$DeepSeeBuildErrorsGLVN("TRAININGCUBE"))
   Set $$$DeepSeeBuildErrorsGLVN("TRAININGCUBE",tID) = tSC
  }
 }
 Quit tSC
]]></Implementation>
</Method>

<Method name="%BuildAllFacts">
<Description><![CDATA[
Update all Facts with data from the source table.<br/>
Generated by %DeepSee.Generator:%CreateFactTable.<br/>
DO NOT CALL THIS METHOD DIRECTLY]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pVerbose:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set tSC = $$$OK
 New %var,%source,%ROWID,%msg,%dsSourceId,%dsSourceObj
 Try {
 Set (SQLCODE,tStarId) = ""
 Set tLastCount = 0
 Set tID = ""
 Set tRows = 0
  &sql(DECLARE sq22407786479 CURSOR FOR
  SELECT %ID,%ID "MxIDI",Course->Description->Value "Dx1487286328",%EXTERNAL(Course->Name) "DxNameViaCourse",DateFinish "DxDateFinish",%EXTERNAL(DateFinish) "DxDateFinishFxYear",%EXTERNAL(Teacher) "DxTeacher" FROM Stc_Data.Training
  )
  &sql(OPEN sq22407786479)
  If (SQLCODE'=0) {
   Set tSC = $$$ERROR($$$GeneralError,"Error opening SQL cursor: ("_$G(SQLCODE)_") "_$G(%msg))
   Quit
  }
  &sql(FETCH sq22407786479 INTO :tID,:%var("MxIDI"),:%var("Dx1487286328"),:%var("DxNameViaCourse"),:%var("DxDateFinish"),:%var("DxDateFinishFxYear"),:%var("DxTeacher"))
  If ((SQLCODE=100)&&pVerbose) {
   Write "No source data found.",!
  }
  While (SQLCODE=0) {
  If ($D(%dsmaxfacts)&&(tRows>=+$G(%dsmaxfacts))) Quit
  Try {
 Set %dsSourceId = $G(tID)
 Set tExStartTime = $ZH
 Set x = $I(^CacheTemp.DeepSeeBuildStats($ZU(5),"TRAININGCUBE","expr"),$ZH-tExStartTime)

 #; invoke method to process this fact
 Set tFactId = ""
 Set tSC = ##class(Stc.DeepSee.TrainingCube.Fact).%ProcessFact(tID,1,.%var,.tFactId,.tErrorMsg)
 Set:$$$ISERR(tSC) err = $I(%dserrcount)
 If ($$$ISERR(tSC)&&pVerbose) {
  Write "Error filing row: ",tID,!
  Write:tErrorMsg'="" tErrorMsg,!
  Do $System.Status.DisplayError(tSC)
  Set tSC = $$$OK
 }
 If (tFactId'="") {
  Set tRows = tRows + 1
  Set:pVerbose %dsfactcount = tRows
  If (pVerbose&&'(tRows#1000)) Write $C(13,27)_"[0J"_"Building fact table: ",?25,$J($FN(tRows,",",0),10)," fact(s) updated."
  If (pVerbose&&'(tRows#1000)&&(+$G(%dserrcount))) Write " ",$J($FN(%dserrcount,",",0),10)," error(s)"
 } ;factId
  }
  Catch (ex) {
    Set tSC = ex.AsStatus()
    If ($G(tID)'="") {
      S:($G($$$DeepSeeBuildErrorsGLVN("TRAININGCUBE",tID))="") x = $I($$$DeepSeeBuildErrorsGLVN("TRAININGCUBE"))
      Set $$$DeepSeeBuildErrorsGLVN("TRAININGCUBE",tID) = tSC
    }
  }
  &sql(FETCH sq22407786479 INTO :tID,:%var("MxIDI"),:%var("Dx1487286328"),:%var("DxNameViaCourse"),:%var("DxDateFinish"),:%var("DxDateFinishFxYear"),:%var("DxTeacher"))
 } ;while
  &sql(CLOSE sq22407786479)
 If (pVerbose) Write $C(13,27)_"[0J"_"Building fact table: "_$FN(+$G(tRows),",",0)_" fact(s) updated"
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  &sql(CLOSE sq22407786479)
 }
 If ($$$ISERR(tSC)) {
  Do ..%LogError(tSC)
  If (pVerbose) {
   Do $System.Status.DisplayError(tSC)
  }
  If ($G(tID)'="") {
   S:($G($$$DeepSeeBuildErrorsGLVN("TRAININGCUBE",tID))="") x = $I($$$DeepSeeBuildErrorsGLVN("TRAININGCUBE"))
   Set $$$DeepSeeBuildErrorsGLVN("TRAININGCUBE",tID) = tSC
  }
 }
 Quit tSC
]]></Implementation>
</Method>

<Method name="%BuildTempFile">
<Description><![CDATA[
Create a temp file of all source ids.<br/>
Generated by %DeepSee.Generator:%CreateFactTable.<br/>
DO NOT CALL THIS METHOD DIRECTLY]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTempKey:%String,*pImplemented:%Boolean,pVerbose:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set tSC = $$$OK
 New %var,%source,%ROWID,%msg,%dsSourceId,%dsSourceObj
 Set pImplemented = 1
 Try {
 Set (SQLCODE,tStarId) = ""
 Kill ^CacheTemp.DeepSeeSourceId(pTempKey)
 Set tID = ""
 Set tRows = 0
  &sql(DECLARE sq32407786479 CURSOR FOR
  SELECT %ID FROM Stc_Data.Training
  )
  &sql(OPEN sq32407786479)
  If (SQLCODE'=0) {
   Set tSC = $$$ERROR($$$GeneralError,"Error opening SQL cursor: ("_$G(SQLCODE)_") "_$G(%msg))
   Quit
  }
  &sql(FETCH sq32407786479 INTO :tID)
  If ((SQLCODE=100)&&pVerbose) {
   Write "No source data found.",!
  }
  While (SQLCODE=0) {
  Set tRows = tRows+1
  Set tChunk = tRows\64000+1
  Set tOffset = tRows#64000+1
  Set:tID'="" ^CacheTemp.DeepSeeSourceId(pTempKey,tChunk,tOffset) = tID
  If (pVerbose&&'(tRows#10000)) Write $C(13,27)_"[0J"_"Building temp file: ",?25,$J($FN(tRows,",",0),10)," record(s) processed."
  If ($D(%dsmaxfacts)&&(tRows>=+$G(%dsmaxfacts))) Quit
  &sql(FETCH sq32407786479 INTO :tID)
 } ;while
  &sql(CLOSE sq32407786479)
 If (pVerbose) Write $C(13,27)_"[0J"_"Building temp file: "_$FN(+$G(tRows),",",0)_" record(s) processed"
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  &sql(CLOSE sq32407786479)
 }
 If ($$$ISERR(tSC)) {
  Do ..%LogError(tSC)
  If (pVerbose) {
   Do $System.Status.DisplayError(tSC)
  }
 }
 Quit tSC
]]></Implementation>
</Method>

<Method name="%ProcessFact">
<Description><![CDATA[
Perform the work of updating one fact in the cube.<br/>
Generated by %DeepSee.Generator:%CreateFactTable.<br/>
DO NOT CALL THIS METHOD DIRECTLY]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pID:%String,pBatchMode:%Boolean=0,&%var:%String,&pFactId:%Integer,*pErrorMsg:%String,&pDimTables,pDimensionsOnly:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set tSC = $$$OK
 New %ROWID,%msg,%value,%source,%expression
 Try {
  Set (SQLCODE,tStarId) = ""
  Set pErrorMsg = ""
  Set pFactId = $G(pFactId)
  Set %value = ""

  #; Transform relationship properties

  #; apply null replacements
  Set:(($G(%var("DxNameViaCourse"))="")||($G(%var("DxNameViaCourse"))=$C(0))) %var("DxNameViaCourse") = "<null>"
  Set:(($G(%var("DxTeacher"))="")||($G(%var("DxTeacher"))=$C(0))) %var("DxTeacher") = "<null>"

  If (pDimensionsOnly) {
   Set tFactId=""
   Set tIsInsert = 1
  }
  ElseIf (pBatchMode) {
   Set zuSetting = $zu(115,1,0)
   Set tIsInsert = 1
  }
  ElseIf (pID'="") {
   Set tFactId = $O($$$DeepSeeIndexGLVN("TRAININGCUBE","%sourceId",pID,""))
   Set tIsInsert = ''(tFactId="")
  }
  ElseIf (pFactId'="") {
   If ($D($$$DeepSeeIndexGLVN("TRAININGCUBE","%sourceIdReverse",pFactId))) {
    Set tFactId = pFactId
    Set tIsInsert = 0
   }
   Else {
    Set tFactId = ""
    Set tIsInsert = 1
   }
  }
  Else {
   Set tFactId = ""
   Set tIsInsert = 1
  }

 #; STAR Table: Stc.DeepSee.TrainingCube.StarNameViaCourse
 If ($G(%var("DxNameViaCourse"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("STC.DEEPSEE.TRAININGCUBE.STARNAMEVIACOURSE","Primary",$zu(28,%var("DxNameViaCourse"),7,113),""))
  If (tStarId '= "") {
   Set %var("DxNameViaCourse") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("DxNameViaCourse"),7,113)
  Lock +$$$DeepSeeIndexGLVN("Stc.DeepSee.TrainingCube.StarNameViaCourse",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'Stc_DeepSee_TrainingCube.StarNameViaCourse'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("STC.DEEPSEE.TRAININGCUBE.STARNAMEVIACOURSE","Primary",$zu(28,%var("DxNameViaCourse"),7,113),""))
   If (tStarId '= "") {
    Set %var("DxNameViaCourse") = tStarId
   }
   Else {
    &sql(INSERT INTO Stc_DeepSee_TrainingCube.StarNameViaCourse (DxNameViaCourse,Dx1487286328) VALUES (:%var("DxNameViaCourse"),:%var("Dx1487286328")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("Stc.DeepSee.TrainingCube.StarNameViaCourse",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'Stc_DeepSee_TrainingCube.StarNameViaCourse' SQLCODE="_SQLCODE)
     Do ..%LogError(tSC)
     Quit
    }
    Set %var("DxNameViaCourse") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("Stc.DeepSee.TrainingCube.StarNameViaCourse",tLockKey)
  }
 }

 #; STAR Table: Stc.DeepSee.TrainingCube.StarTeacher
 If ($G(%var("DxTeacher"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("STC.DEEPSEE.TRAININGCUBE.STARTEACHER","Primary",$zu(28,%var("DxTeacher"),7,113),""))
  If (tStarId '= "") {
   Set %var("DxTeacher") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("DxTeacher"),7,113)
  Lock +$$$DeepSeeIndexGLVN("Stc.DeepSee.TrainingCube.StarTeacher",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'Stc_DeepSee_TrainingCube.StarTeacher'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("STC.DEEPSEE.TRAININGCUBE.STARTEACHER","Primary",$zu(28,%var("DxTeacher"),7,113),""))
   If (tStarId '= "") {
    Set %var("DxTeacher") = tStarId
   }
   Else {
    &sql(INSERT INTO Stc_DeepSee_TrainingCube.StarTeacher (DxTeacher) VALUES (:%var("DxTeacher")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("Stc.DeepSee.TrainingCube.StarTeacher",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'Stc_DeepSee_TrainingCube.StarTeacher' SQLCODE="_SQLCODE)
     Do ..%LogError(tSC)
     Quit
    }
    Set %var("DxTeacher") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("Stc.DeepSee.TrainingCube.StarTeacher",tLockKey)
  }
 }
 If ('pBatchMode) {
    Set tVal = %var("DxNameViaCourse")
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("TRAININGCUBE",2,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("TRAININGCUBE","fact",2))
    }
    Set tVal = ##class(%DeepSee.Time.Year).%Convert(%var("DxDateFinish"))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("TRAININGCUBE",3,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("TRAININGCUBE","fact",3))
    }
    Set tVal = %var("DxTeacher")
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("TRAININGCUBE",4,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("TRAININGCUBE","fact",4))
    }
 }
 #; INSERT or UPDATE data into fact table
 If (pDimensionsOnly) {
 }
 ElseIf (pBatchMode) {
  &sql(INSERT %NOLOCK %NOINDEX INTO Stc_DeepSee_TrainingCube.Fact (%sourceId,DxDateFinish,DxNameViaCourse,DxTeacher,MxIDI)
       VALUES (:pID,:%var("DxDateFinish"),:%var("DxNameViaCourse"),:%var("DxTeacher"),:%var("MxIDI")))
  Set pFactId = %ROWID
  If (pFactId'="") {
   Set:pID'="" $$$DeepSeeIndexGLVN("TRAININGCUBE","%sourceId",pID,pFactId) = ""
   Set $$$DeepSeeIndexGLVN("TRAININGCUBE","%sourceIdReverse",pFactId) = pID
  }
 }
 Else {
 If ($G(tFactId)'="") {
  &sql(UPDATE Stc_DeepSee_TrainingCube.Fact (%sourceId,DxDateFinish,DxNameViaCourse,DxTeacher,MxIDI)
       VALUES (:pID,:%var("DxDateFinish"),:%var("DxNameViaCourse"),:%var("DxTeacher"),:%var("MxIDI")) WHERE %ID = :tFactId)
  Set pFactId = tFactId
 }
 Else {
  &sql(INSERT INTO Stc_DeepSee_TrainingCube.Fact (%sourceId,DxDateFinish,DxNameViaCourse,DxTeacher,MxIDI)
       VALUES (:pID,:%var("DxDateFinish"),:%var("DxNameViaCourse"),:%var("DxTeacher"),:%var("MxIDI")))
  Set pFactId = %ROWID
  If (pFactId'="") {
   Set:pID'="" $$$DeepSeeIndexGLVN("TRAININGCUBE","%sourceId",pID,pFactId) = ""
   Set $$$DeepSeeIndexGLVN("TRAININGCUBE","%sourceIdReverse",pFactId) = pID
  }
 }
 }
 If (SQLCODE'=0) {
  Set pErrorMsg = $G(%msg)
  Set tSC = $$$ERROR($$$GeneralError,"Error inserting/updating fact: (Source ID:'"_pID_"') "_pErrorMsg)
  Do ..%LogError(tSC)
  Set x = $I($$$DeepSeeBuildErrorsGLVN("TRAININGCUBE"))
  Set $$$DeepSeeBuildErrorsGLVN("TRAININGCUBE",pID) = tSC
 }
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  Set pErrorMsg = $ZE
  Do ..%LogError(tSC)
  Set x = $I($$$DeepSeeBuildErrorsGLVN("TRAININGCUBE"))
  Set $$$DeepSeeBuildErrorsGLVN("TRAININGCUBE",pID) = tSC
 }
 Set:$D(zuSetting) zuSetting = $zu(115,1,zuSetting)
 Quit tSC
]]></Implementation>
</Method>

<Method name="%OnStartBatch">
<Description><![CDATA[
Notification that a batch of facts are about to be processed.<br/>
Generated by %DeepSee.Generator:%CreateFactTable.<br/>
DO NOT CALL THIS METHOD DIRECTLY]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pCubeName:%String,pVerbose:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[ Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnEndBatch">
<Description><![CDATA[
Notification that a batch of facts have just been processed.<br/>
Generated by %DeepSee.Generator:%CreateFactTable.<br/>
DO NOT CALL THIS METHOD DIRECTLY]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pCubeName:%String,pVerbose:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[ Quit $$$OK
]]></Implementation>
</Method>

<Method name="%InjectFact">
<Description><![CDATA[
Perform the work of injecting one fact into the cube without associated source data.<br/>
Generated by %DeepSee.Generator:%CreateFactTable.<br/>
DO NOT CALL THIS METHOD DIRECTLY]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pFactId:%Integer,&pValues:%String,*pChunks:%Integer,pDimensionsOnly:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New %var,%source,%value
 Set tSC = $$$OK
 Try {
  Set %value=""
  Set %var("MxIDI") = $G(pValues("%ID"))
  Set %var("Dx1487286328") = $G(pValues("Course.Description.Value"))
  Set %var("DxNameViaCourse") = $G(pValues("Course.Name~~EXTERNAL"),$G(pValues("Course.Name")))
  Set %var("DxDateFinish") = $G(pValues("DateFinish"))
  Set %var("DxDateFinishFxYear") = $G(pValues("DateFinish~~EXTERNAL"),$G(pValues("DateFinish")))
  Set %var("DxTeacher") = $G(pValues("Teacher~~EXTERNAL"),$G(pValues("Teacher")))

  #; invoke method to process this fact
  Set pFactId = $G(pFactId)
  Set tSC = ##class(Stc.DeepSee.TrainingCube.Fact).%ProcessFact("",0,.%var,.pFactId,.pErrorMsg,,pDimensionsOnly)
  If $$$ISOK(tSC) {
   Set:(pFactId'="")&&('pDimensionsOnly) pChunks(pFactId\64000+1) = ""
  }
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  Do ..%LogError(tSC)
  Set x = $I($$$DeepSeeBuildErrorsGLVN("TRAININGCUBE"))
  Set $$$DeepSeeBuildErrorsGLVN("TRAININGCUBE",pID) = tSC
 }
 Quit tSC
]]></Implementation>
</Method>

<Method name="%DeleteFact">
<Description><![CDATA[
Perform the work of deleting one fact in the cube.<br/>
Generated by %DeepSee.Generator:%CreateFactTable.<br/>
DO NOT CALL THIS METHOD DIRECTLY]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String,*pFactId:%Integer,*pErrorMsg:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set tSC = $$$OK
 New %ROWID,%msg
 Try {
  Set (SQLCODE,tStarId) = ""
  Set pErrorMsg = ""
  Set pFactId = ""
  Set pFactId = $O($$$DeepSeeIndexGLVN("TRAININGCUBE","%sourceId",pID,""))
  If (pFactId'="") {
   &sql(DELETE FROM Stc_DeepSee_TrainingCube.Fact WHERE %ID = :pFactId)
   Kill $$$DeepSeeIndexGLVN("TRAININGCUBE","%sourceId",pID,pFactId)
   Kill $$$DeepSeeIndexGLVN("TRAININGCUBE","%sourceIdReverse",pFactId)
  }
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  Set pErrorMsg = $ZE
  Do ..%LogError(tSC)
 }
 Quit tSC
]]></Implementation>
</Method>

<Method name="%OnKillFacts">
<Description><![CDATA[
Notification that this cube is being killed.<br/>
Generated by %DeepSee.Generator:%CreateFactTable.<br/>
DO NOT CALL THIS METHOD DIRECTLY]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set tSC = $$$OK
 Try {
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  Do ..%LogError(tSC)
 }
 Quit tSC
]]></Implementation>
</Method>

<Method name="%PrecomputeAggregates">
<Description><![CDATA[
Pre-compute certain aggregates.<br/>
Generated by %DeepSee.Generator:%CreateFactTable.<br/>
DO NOT CALL THIS METHOD DIRECTLY]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStartChunk:%Integer,pEndChunk:%Integer,pAggGLVN:%String,pVerbose:%Boolean=0,pTaskGroup:%String="",&pCount:%Integer=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set tSC = $$$OK
 New %ROWID,%msg,%var
 Kill @pAggGLVN
 Try {
  Set (SQLCODE) = ""
  Set tLastCount = 0
 If (pTaskGroup'="") {
  Set tDelta = pCount - tLastCount
  Set inc=$I(^CacheTemp.DeepSeeUpdate($ZU(5),pTaskGroup,"facts"),tDelta)
 }
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  Set pErrorMsg = $ZE
  Do ..%LogError(tSC)
 }
 Quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^DeepSee.Fact("STC.DEEPSEE.TRAININGCUBE.FACT")</DataLocation>
<DefaultData>FactDefaultData</DefaultData>
<IdLocation>^DeepSee.Fact("STC.DEEPSEE.TRAININGCUBE.FACT")</IdLocation>
<IndexLocation>^Stc.DeepSee.TrainingCube.FactI</IndexLocation>
<StreamLocation>^DeepSee.FactS("STC.DEEPSEE.TRAININGCUBE.FACT")</StreamLocation>
<ExtentSize>10000000</ExtentSize>
<Data name="FactDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%sourceId</Value>
</Value>
<Value name="2">
<Value>DxDateFinish</Value>
</Value>
<Value name="3">
<Value>DxNameViaCourse</Value>
</Value>
<Value name="4">
<Value>DxTeacher</Value>
</Value>
<Value name="5">
<Value>MxIDI</Value>
</Value>
</Data>
<Index name="$Fact">
<Location>^DeepSee.Index("TRAININGCUBE","$Fact")</Location>
</Index>
<Index name="DxDateFinishFxYear">
<Location>^DeepSee.Index("TRAININGCUBE",3)</Location>
</Index>
<Index name="DxNameViaCourse">
<Location>^DeepSee.Index("TRAININGCUBE",2)</Location>
</Index>
<Index name="DxTeacher">
<Location>^DeepSee.Index("TRAININGCUBE",4)</Location>
</Index>
<Index name="MxIDI">
<Location>^DeepSee.Index("TRAININGCUBE","M1")</Location>
</Index>
</Storage>
</Class>
</Export>
